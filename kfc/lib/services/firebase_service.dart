import 'package:cloud_firestore/cloud_firestore.dart';
import '../models/san_pham.dart';
import '../models/danh_muc.dart';

class FirebaseService {
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  
  // Cache ƒë·ªÉ tr√°nh g·ªçi Firebase li√™n t·ª•c
  static List<DanhMuc>? _cachedDanhMuc;
  static List<SanPham>? _cachedSanPham;
  static DateTime? _lastCacheTime;
  static const Duration _cacheExpiry = Duration(minutes: 5);

  // Ki·ªÉm tra cache c√≤n hi·ªáu l·ª±c kh√¥ng
  static bool _isCacheValid() {
    if (_lastCacheTime == null) return false;
    return DateTime.now().difference(_lastCacheTime!) < _cacheExpiry;
  }

  // Helper method ƒë·ªÉ parse gi√° tr·ªã int an to√†n
  static int _parseToInt(dynamic value, {int defaultValue = 0}) {
    if (value == null) return defaultValue;
    if (value is int) return value;
    if (value is double) return value.toInt();
    if (value is String) {
      return int.tryParse(value) ?? defaultValue;
    }
    return defaultValue;
  }

  static int? _parseToIntNullable(dynamic value) {
    if (value == null) return null;
    if (value is int) return value;
    if (value is double) return value.toInt();
    if (value is String) {
      return int.tryParse(value);
    }
    return null;
  }

  static bool _parseToBool(dynamic value, {bool defaultValue = false}) {
    if (value == null) return defaultValue;
    if (value is bool) return value;
    if (value is String) {
      return value.toLowerCase() == 'true';
    }
    if (value is num) {
      return value != 0;
    }
    return defaultValue;
  }

  // H√†m x·ª≠ l√Ω d·ªØ li·ªáu s·∫£n ph·∫©m ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh nh·∫•t qu√°n
  static Map<String, dynamic> _processProductData(Map<String, dynamic> data) {
    final processedData = Map<String, dynamic>.from(data);
    
    // X·ª≠ l√Ω tr∆∞·ªùng gi√°
    processedData['gia'] = _parseToInt(data['gia']);
    
    // X·ª≠ l√Ω tr∆∞·ªùng khuy·∫øn m√£i
    final hasPromotion = _parseToBool(data['khuyenMai']);
    processedData['khuyenMai'] = hasPromotion;
    
    // X·ª≠ l√Ω tr∆∞·ªùng gi·∫£m gi√°
    if (hasPromotion) {
      processedData['giamGia'] = _parseToIntNullable(data['giamGia']) ?? 0;
    } else {
      processedData['giamGia'] = null;
    }
    
    // X·ª≠ l√Ω tr∆∞·ªùng danh m·ª•c ID - ∆∞u ti√™n danhMucID
    if (data.containsKey('danhMucID')) {
      processedData['danhMucId'] = data['danhMucID'];
    } else if (data.containsKey('danhMucId')) {
      processedData['danhMucId'] = data['danhMucId'];
    } else {
      processedData['danhMucId'] = '';
    }
    
    // ƒê·∫£m b·∫£o c√°c tr∆∞·ªùng kh√°c c√≥ gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu null
    processedData['ten'] = data['ten'] ?? 'S·∫£n ph·∫©m kh√¥ng t√™n';
    processedData['moTa'] = data['moTa'] ?? '';
    processedData['hinhAnh'] = data['hinhAnh'] ?? '';
    
    return processedData;
  }

  // L·∫•y danh s√°ch danh m·ª•c t·ª´ Firebase
  static Future<List<DanhMuc>> layDanhSachDanhMuc({bool forceRefresh = false}) async {
    // S·ª≠ d·ª•ng cache n·∫øu c√≤n hi·ªáu l·ª±c v√† kh√¥ng b·∫Øt bu·ªôc refresh
    if (!forceRefresh && _isCacheValid() && _cachedDanhMuc != null) {
      print('üì¶ S·ª≠ d·ª•ng cache cho danh m·ª•c');
      return _cachedDanhMuc!;
    }

    try {
      print('üîÑ ƒêang l·∫•y danh m·ª•c t·ª´ Firebase...');
      
      QuerySnapshot snapshot = await _firestore
          .collection('danh_muc')
          .orderBy('ten')
          .get()
          .timeout(
            Duration(seconds: 10),
            onTimeout: () {
              throw Exception('Timeout khi l·∫•y danh m·ª•c');
            },
          );
      
      List<DanhMuc> danhSachDanhMuc = snapshot.docs.map((doc) {
        Map<String, dynamic> data = doc.data() as Map<String, dynamic>;
        data['id'] = doc.id;
        return DanhMuc.fromJson(data);
      }).toList();

      // C·∫≠p nh·∫≠t cache
      _cachedDanhMuc = danhSachDanhMuc;
      _lastCacheTime = DateTime.now();

      print('‚úÖ L·∫•y th√†nh c√¥ng ${danhSachDanhMuc.length} danh m·ª•c t·ª´ Firebase');
      return danhSachDanhMuc;
    } catch (e) {
      print('‚ùå L·ªói khi l·∫•y danh m·ª•c t·ª´ Firebase: $e');
      
      // N·∫øu c√≥ cache c≈©, tr·∫£ v·ªÅ cache
      if (_cachedDanhMuc != null) {
        print('üì¶ S·ª≠ d·ª•ng cache c≈© do l·ªói k·∫øt n·ªëi');
        return _cachedDanhMuc!;
      }
      
      rethrow;
    }
  }

  // L·∫•y danh s√°ch s·∫£n ph·∫©m t·ª´ Firebase
  static Future<List<SanPham>> layDanhSachSanPham({bool forceRefresh = false}) async {
    // S·ª≠ d·ª•ng cache n·∫øu c√≤n hi·ªáu l·ª±c v√† kh√¥ng b·∫Øt bu·ªôc refresh
    if (!forceRefresh && _isCacheValid() && _cachedSanPham != null) {
      print('üì¶ S·ª≠ d·ª•ng cache cho s·∫£n ph·∫©m');
      return _cachedSanPham!;
    }

    try {
      print('üîÑ ƒêang l·∫•y s·∫£n ph·∫©m t·ª´ Firebase...');
      
      QuerySnapshot snapshot = await _firestore
          .collection('san_pham')
          .orderBy('ten')
          .get()
          .timeout(
            Duration(seconds: 15),
            onTimeout: () {
              throw Exception('Timeout khi l·∫•y s·∫£n ph·∫©m');
            },
          );
      
      List<SanPham> danhSachSanPham = [];
      for (var doc in snapshot.docs) {
        try {
          Map<String, dynamic> data = doc.data() as Map<String, dynamic>;
          data['id'] = doc.id;
          
          // X·ª≠ l√Ω d·ªØ li·ªáu tr∆∞·ªõc khi t·∫°o ƒë·ªëi t∆∞·ª£ng SanPham
          final processedData = _processProductData(data);
          danhSachSanPham.add(SanPham.fromJson(processedData));
        } catch (e) {
          print('‚ö†Ô∏è L·ªói khi parse s·∫£n ph·∫©m ${doc.id}: $e');
          // B·ªè qua s·∫£n ph·∫©m l·ªói
        }
      }

      // C·∫≠p nh·∫≠t cache
      _cachedSanPham = danhSachSanPham;
      _lastCacheTime = DateTime.now();

      print('‚úÖ L·∫•y th√†nh c√¥ng ${danhSachSanPham.length} s·∫£n ph·∫©m t·ª´ Firebase');
      return danhSachSanPham;
    } catch (e) {
      print('‚ùå L·ªói khi l·∫•y s·∫£n ph·∫©m t·ª´ Firebase: $e');
      
      // N·∫øu c√≥ cache c≈©, tr·∫£ v·ªÅ cache
      if (_cachedSanPham != null) {
        print('üì¶ S·ª≠ d·ª•ng cache c≈© do l·ªói k·∫øt n·ªëi');
        return _cachedSanPham!;
      }
      
      rethrow;
    }
  }

  // L·∫•y s·∫£n ph·∫©m theo danh m·ª•c
  static Future<List<SanPham>> layDanhSachSanPhamTheoDanhMuc(String danhMucId) async {
    try {
      // N·∫øu c√≥ cache s·∫£n ph·∫©m, l·ªçc t·ª´ cache
      if (_isCacheValid() && _cachedSanPham != null) {
        print('üì¶ L·ªçc s·∫£n ph·∫©m theo danh m·ª•c t·ª´ cache');
        return _cachedSanPham!.where((sp) => sp.danhMucId == danhMucId).toList();
      }

      print('üîÑ ƒêang l·∫•y s·∫£n ph·∫©m theo danh m·ª•c: $danhMucId');
      
      QuerySnapshot snapshot = await _firestore
          .collection('san_pham')
          .where('danhMucID', isEqualTo: danhMucId)
          .get()
          .timeout(
            Duration(seconds: 10),
            onTimeout: () {
              throw Exception('Timeout khi l·∫•y s·∫£n ph·∫©m theo danh m·ª•c');
            },
          );
      
      List<SanPham> danhSachSanPham = [];
      for (var doc in snapshot.docs) {
        try {
          Map<String, dynamic> data = doc.data() as Map<String, dynamic>;
          data['id'] = doc.id;
          final processedData = _processProductData(data);
          danhSachSanPham.add(SanPham.fromJson(processedData));
        } catch (e) {
          print('‚ö†Ô∏è L·ªói khi parse s·∫£n ph·∫©m theo danh m·ª•c ${doc.id}: $e');
        }
      }

      print('‚úÖ L·∫•y th√†nh c√¥ng ${danhSachSanPham.length} s·∫£n ph·∫©m cho danh m·ª•c $danhMucId');
      return danhSachSanPham;
    } catch (e) {
      print('‚ùå L·ªói khi l·∫•y s·∫£n ph·∫©m theo danh m·ª•c: $e');
      rethrow;
    }
  }

  // L·∫•y s·∫£n ph·∫©m khuy·∫øn m√£i
  static Future<List<SanPham>> layDanhSachSanPhamKhuyenMai() async {
    try {
      // N·∫øu c√≥ cache s·∫£n ph·∫©m, l·ªçc t·ª´ cache
      if (_isCacheValid() && _cachedSanPham != null) {
        print('üì¶ L·ªçc s·∫£n ph·∫©m khuy·∫øn m√£i t·ª´ cache');
        return _cachedSanPham!.where((sp) => sp.coKhuyenMai).toList();
      }

      print('üîÑ ƒêang l·∫•y s·∫£n ph·∫©m khuy·∫øn m√£i...');
      
      QuerySnapshot snapshot = await _firestore
          .collection('san_pham')
          .where('khuyenMai', isEqualTo: true)
          .get()
          .timeout(
            Duration(seconds: 10),
            onTimeout: () {
              throw Exception('Timeout khi l·∫•y s·∫£n ph·∫©m khuy·∫øn m√£i');
            },
          );
      
      List<SanPham> danhSachSanPham = [];
      for (var doc in snapshot.docs) {
        try {
          Map<String, dynamic> data = doc.data() as Map<String, dynamic>;
          data['id'] = doc.id;
          final processedData = _processProductData(data);
          danhSachSanPham.add(SanPham.fromJson(processedData));
        } catch (e) {
          print('‚ö†Ô∏è L·ªói khi parse s·∫£n ph·∫©m khuy·∫øn m√£i ${doc.id}: $e');
        }
      }

      print('‚úÖ L·∫•y th√†nh c√¥ng ${danhSachSanPham.length} s·∫£n ph·∫©m khuy·∫øn m√£i');
      return danhSachSanPham;
    } catch (e) {
      print('‚ùå L·ªói khi l·∫•y s·∫£n ph·∫©m khuy·∫øn m√£i: $e');
      rethrow;
    }
  }

  // L·∫•y s·∫£n ph·∫©m n·ªïi b·∫≠t
  static Future<List<SanPham>> layDanhSachSanPhamNoiBat() async {
    try {
      // N·∫øu c√≥ cache s·∫£n ph·∫©m, l·∫•y s·∫£n ph·∫©m n·ªïi b·∫≠t theo logic
      if (_isCacheValid() && _cachedSanPham != null) {
        print('üì¶ L·ªçc s·∫£n ph·∫©m n·ªïi b·∫≠t t·ª´ cache');
        return _cachedSanPham!
            .where((sp) => sp.coKhuyenMai || sp.gia >= 50000)
            .take(10)
            .toList();
      }

      print('üîÑ ƒêang l·∫•y s·∫£n ph·∫©m n·ªïi b·∫≠t...');
      
      // Th·ª≠ t√¨m s·∫£n ph·∫©m c√≥ field 'noiBat'
      QuerySnapshot snapshot = await _firestore
          .collection('san_pham')
          .where('noiBat', isEqualTo: true)
          .get()
          .timeout(
            Duration(seconds: 10),
            onTimeout: () {
              throw Exception('Timeout khi l·∫•y s·∫£n ph·∫©m n·ªïi b·∫≠t');
            },
          );
      
      List<SanPham> danhSachSanPham = [];
      for (var doc in snapshot.docs) {
        try {
          Map<String, dynamic> data = doc.data() as Map<String, dynamic>;
          data['id'] = doc.id;
          final processedData = _processProductData(data);
          danhSachSanPham.add(SanPham.fromJson(processedData));
        } catch (e) {
          print('‚ö†Ô∏è L·ªói khi parse s·∫£n ph·∫©m n·ªïi b·∫≠t ${doc.id}: $e');
        }
      }

      // N·∫øu kh√¥ng c√≥ s·∫£n ph·∫©m n·ªïi b·∫≠t, l·∫•y s·∫£n ph·∫©m khuy·∫øn m√£i
      if (danhSachSanPham.isEmpty) {
        print('üîÑ Kh√¥ng c√≥ s·∫£n ph·∫©m n·ªïi b·∫≠t, l·∫•y s·∫£n ph·∫©m khuy·∫øn m√£i...');
        return await layDanhSachSanPhamKhuyenMai();
      }

      print('‚úÖ L·∫•y th√†nh c√¥ng ${danhSachSanPham.length} s·∫£n ph·∫©m n·ªïi b·∫≠t');
      return danhSachSanPham;
    } catch (e) {
      print('‚ùå L·ªói khi l·∫•y s·∫£n ph·∫©m n·ªïi b·∫≠t: $e');
      
      // Fallback: L·∫•y s·∫£n ph·∫©m khuy·∫øn m√£i
      try {
        return await layDanhSachSanPhamKhuyenMai();
      } catch (e2) {
        rethrow;
      }
    }
  }

  // T√¨m ki·∫øm s·∫£n ph·∫©m
  static Future<List<SanPham>> timKiemSanPham(String tuKhoa) async {
    try {
      print('üîç ƒêang t√¨m ki·∫øm s·∫£n ph·∫©m v·ªõi t·ª´ kh√≥a: $tuKhoa');
      
      if (_isCacheValid() && _cachedSanPham != null) {
        print('üì¶ T√¨m ki·∫øm t·ª´ cache');
        List<SanPham> ketQua = _cachedSanPham!.where((sanPham) {
          return sanPham.ten.toLowerCase().contains(tuKhoa.toLowerCase()) ||
                 sanPham.moTa.toLowerCase().contains(tuKhoa.toLowerCase());
        }).toList();
        
        if (ketQua.isNotEmpty) {
          print('‚úÖ T√¨m th·∫•y ${ketQua.length} s·∫£n ph·∫©m t·ª´ cache');
          return ketQua;
        }
      }
      
      QuerySnapshot snapshot = await _firestore
          .collection('san_pham')
          .get()
          .timeout(
            Duration(seconds: 10),
            onTimeout: () {
              throw Exception('Timeout khi t√¨m ki·∫øm s·∫£n ph·∫©m');
            },
          );
      
      List<SanPham> tatCaSanPham = [];
      for (var doc in snapshot.docs) {
        try {
          Map<String, dynamic> data = doc.data() as Map<String, dynamic>;
          data['id'] = doc.id;
          final processedData = _processProductData(data);
          tatCaSanPham.add(SanPham.fromJson(processedData));
        } catch (e) {
          print('‚ö†Ô∏è L·ªói khi parse s·∫£n ph·∫©m t√¨m ki·∫øm ${doc.id}: $e');
        }
      }

      _cachedSanPham = tatCaSanPham;
      _lastCacheTime = DateTime.now();

      List<SanPham> ketQua = tatCaSanPham.where((sanPham) {
        return sanPham.ten.toLowerCase().contains(tuKhoa.toLowerCase()) ||
               sanPham.moTa.toLowerCase().contains(tuKhoa.toLowerCase());
      }).toList();

      print('‚úÖ T√¨m th·∫•y ${ketQua.length} s·∫£n ph·∫©m');
      return ketQua;
    } catch (e) {
      print('‚ùå L·ªói khi t√¨m ki·∫øm s·∫£n ph·∫©m: $e');
      rethrow;
    }
  }

  // L·∫•y s·∫£n ph·∫©m li√™n quan
  static Future<List<SanPham>> laySanPhamLienQuan(SanPham sanPham) async {
    try {
      print('üîÑ ƒêang l·∫•y s·∫£n ph·∫©m li√™n quan cho: ${sanPham.ten}');
      
      if (_isCacheValid() && _cachedSanPham != null) {
        print('üì¶ L·ªçc s·∫£n ph·∫©m li√™n quan t·ª´ cache');
        return _cachedSanPham!
            .where((sp) => sp.danhMucId == sanPham.danhMucId && sp.id != sanPham.id)
            .take(3)
            .toList();
      }
      
      QuerySnapshot snapshot = await _firestore
          .collection('san_pham')
          .where('danhMucID', isEqualTo: sanPham.danhMucId)
          .limit(4)
          .get()
          .timeout(
            Duration(seconds: 10),
            onTimeout: () {
              throw Exception('Timeout khi l·∫•y s·∫£n ph·∫©m li√™n quan');
            },
          );
      
      List<SanPham> danhSachSanPham = [];
      for (var doc in snapshot.docs) {
        try {
          Map<String, dynamic> data = doc.data() as Map<String, dynamic>;
          data['id'] = doc.id;
          final processedData = _processProductData(data);
          final sp = SanPham.fromJson(processedData);
          if (sp.id != sanPham.id) {
            danhSachSanPham.add(sp);
          }
        } catch (e) {
          print('‚ö†Ô∏è L·ªói khi parse s·∫£n ph·∫©m li√™n quan ${doc.id}: $e');
        }
      }

      print('‚úÖ L·∫•y th√†nh c√¥ng ${danhSachSanPham.length} s·∫£n ph·∫©m li√™n quan');
      return danhSachSanPham.take(3).toList();
    } catch (e) {
      print('‚ùå L·ªói khi l·∫•y s·∫£n ph·∫©m li√™n quan: $e');
      rethrow;
    }
  }

  // L·∫•y s·∫£n ph·∫©m theo ID
  static Future<SanPham?> laySanPhamTheoId(String sanPhamId) async {
    try {
      print('üîç ƒêang l·∫•y s·∫£n ph·∫©m ID: $sanPhamId t·ª´ Firebase...');
      
      // L·∫•y tr·ª±c ti·∫øp t·ª´ Firebase
      final docSnapshot = await _firestore
          .collection('san_pham')
          .doc(sanPhamId)
          .get()
          .timeout(
            Duration(seconds: 15),
            onTimeout: () {
              throw Exception('Timeout khi l·∫•y s·∫£n ph·∫©m theo ID');
            },
          );
      
      if (docSnapshot.exists && docSnapshot.data() != null) {
        final data = docSnapshot.data()!;
        data['id'] = sanPhamId;
        
        final processedData = _processProductData(data);
        final sanPham = SanPham.fromJson(processedData);
        
        print('‚úÖ ƒê√£ l·∫•y s·∫£n ph·∫©m t·ª´ Firebase: ${sanPham.ten}');
        return sanPham;
      } else {
        print('‚ùå Kh√¥ng t√¨m th·∫•y document v·ªõi ID: $sanPhamId');
        
        // Th·ª≠ t√¨m b·∫±ng query n·∫øu kh√¥ng t√¨m th·∫•y b·∫±ng document ID
        print('üîç Th·ª≠ t√¨m b·∫±ng query...');
        final querySnapshot = await _firestore
            .collection('san_pham')
            .where('id', isEqualTo: sanPhamId)
            .limit(1)
            .get();
        
        if (querySnapshot.docs.isNotEmpty) {
          final doc = querySnapshot.docs.first;
          final data = doc.data();
          data['id'] = doc.id;
          
          final processedData = _processProductData(data);
          final sanPham = SanPham.fromJson(processedData);
          
          print('‚úÖ ƒê√£ t√¨m th·∫•y s·∫£n ph·∫©m b·∫±ng query: ${sanPham.ten}');
          return sanPham;
        }
        
        return null;
      }
    } catch (e) {
      print('‚ùå L·ªói khi l·∫•y s·∫£n ph·∫©m theo ID: $e');
      return null;
    }
  }

  // X√≥a cache
  static void xoaCache() {
    _cachedDanhMuc = null;
    _cachedSanPham = null;
    _lastCacheTime = null;
    print('üóëÔ∏è ƒê√£ x√≥a cache');
  }

  // Stream danh m·ª•c
  static Stream<List<DanhMuc>> streamDanhMuc() {
    try {
      return _firestore
          .collection('danh_muc')
          .orderBy('ten')
          .snapshots()
          .map((snapshot) {
        List<DanhMuc> danhSach = snapshot.docs.map((doc) {
          Map<String, dynamic> data = doc.data() as Map<String, dynamic>;
          data['id'] = doc.id;
          return DanhMuc.fromJson(data);
        }).toList();
        
        _cachedDanhMuc = danhSach;
        _lastCacheTime = DateTime.now();
        
        return danhSach;
      });
    } catch (e) {
      print('‚ùå L·ªói stream danh m·ª•c: $e');
      throw e;
    }
  }

  // Stream s·∫£n ph·∫©m
  static Stream<List<SanPham>> streamSanPham() {
    try {
      return _firestore
          .collection('san_pham')
          .orderBy('ten')
          .snapshots()
          .map((snapshot) {
        List<SanPham> danhSach = [];
        for (var doc in snapshot.docs) {
          try {
            Map<String, dynamic> data = doc.data() as Map<String, dynamic>;
            data['id'] = doc.id;
            final processedData = _processProductData(data);
            danhSach.add(SanPham.fromJson(processedData));
          } catch (e) {
            print('‚ö†Ô∏è L·ªói khi parse s·∫£n ph·∫©m stream ${doc.id}: $e');
          }
        }
        
        _cachedSanPham = danhSach;
        _lastCacheTime = DateTime.now();
        
        return danhSach;
      });
    } catch (e) {
      print('‚ùå L·ªói stream s·∫£n ph·∫©m: $e');
      throw e;
    }
  }
}
