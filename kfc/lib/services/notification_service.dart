import 'package:flutter/material.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import '../models/thong_bao.dart';

class NotificationService {
  static final FlutterLocalNotificationsPlugin _localNotifications = 
      FlutterLocalNotificationsPlugin();
  static final FirebaseMessaging _firebaseMessaging = FirebaseMessaging.instance;
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  static final FirebaseAuth _auth = FirebaseAuth.instance;

  // Kh·ªüi t·∫°o notification service
  static Future<void> initialize() async {
    // Kh·ªüi t·∫°o local notifications
    const androidSettings = AndroidInitializationSettings('@mipmap/ic_launcher');
    const iosSettings = DarwinInitializationSettings(
      requestAlertPermission: true,
      requestBadgePermission: true,
      requestSoundPermission: true,
    );
    
    const initSettings = InitializationSettings(
      android: androidSettings,
      iOS: iosSettings,
    );

    await _localNotifications.initialize(
      initSettings,
      onDidReceiveNotificationResponse: _onNotificationTapped,
    );

    // Kh·ªüi t·∫°o Firebase Messaging
    await _initializeFirebaseMessaging();
  }

  static Future<void> _initializeFirebaseMessaging() async {
    // Y√™u c·∫ßu quy·ªÅn th√¥ng b√°o
    NotificationSettings settings = await _firebaseMessaging.requestPermission(
      alert: true,
      badge: true,
      sound: true,
      provisional: false,
    );

    if (settings.authorizationStatus == AuthorizationStatus.authorized) {
      print('‚úÖ ƒê√£ c·∫•p quy·ªÅn th√¥ng b√°o');
      
      // L·∫•y FCM token
      String? token = await _firebaseMessaging.getToken();
      if (token != null) {
        await _saveTokenToFirestore(token);
      }

      // L·∫Øng nghe token refresh
      _firebaseMessaging.onTokenRefresh.listen(_saveTokenToFirestore);

      // X·ª≠ l√Ω th√¥ng b√°o khi app ƒëang ch·∫°y
      FirebaseMessaging.onMessage.listen(_handleForegroundMessage);

      // X·ª≠ l√Ω th√¥ng b√°o khi app ƒë∆∞·ª£c m·ªü t·ª´ background
      FirebaseMessaging.onMessageOpenedApp.listen(_handleBackgroundMessage);

      // X·ª≠ l√Ω th√¥ng b√°o khi app ƒë∆∞·ª£c m·ªü t·ª´ terminated state
      RemoteMessage? initialMessage = await _firebaseMessaging.getInitialMessage();
      if (initialMessage != null) {
        _handleBackgroundMessage(initialMessage);
      }
    }
  }

  static Future<void> _saveTokenToFirestore(String token) async {
    final user = _auth.currentUser;
    if (user != null) {
      try {
        await _firestore.collection('users').doc(user.uid).update({
          'fcmToken': token,
          'tokenUpdatedAt': FieldValue.serverTimestamp(),
        });
        print('‚úÖ ƒê√£ l∆∞u FCM token');
      } catch (e) {
        print('‚ùå L·ªói khi l∆∞u FCM token: $e');
      }
    }
  }

  static void _handleForegroundMessage(RemoteMessage message) {
    print('üì± Nh·∫≠n th√¥ng b√°o khi app ƒëang ch·∫°y: ${message.notification?.title}');
    
    // Hi·ªÉn th·ªã local notification
    _showLocalNotification(
      title: message.notification?.title ?? 'KFC Vietnam',
      body: message.notification?.body ?? '',
      payload: message.data.toString(),
    );

    // L∆∞u th√¥ng b√°o v√†o Firestore
    _saveNotificationToFirestore(message);
  }

  static void _handleBackgroundMessage(RemoteMessage message) {
    print('üì± M·ªü app t·ª´ th√¥ng b√°o: ${message.notification?.title}');
    // X·ª≠ l√Ω navigation ho·∫∑c action c·ª• th·ªÉ
    _handleNotificationAction(message.data);
  }

  static Future<void> _showLocalNotification({
    required String title,
    required String body,
    String? payload,
  }) async {
    const androidDetails = AndroidNotificationDetails(
      'kfc_channel',
      'KFC Notifications',
      channelDescription: 'Th√¥ng b√°o t·ª´ KFC Vietnam',
      importance: Importance.high,
      priority: Priority.high,
      icon: '@mipmap/ic_launcher',
      color: Color(0xFFD00808),
    );

    const iosDetails = DarwinNotificationDetails(
      presentAlert: true,
      presentBadge: true,
      presentSound: true,
    );

    const details = NotificationDetails(
      android: androidDetails,
      iOS: iosDetails,
    );

    await _localNotifications.show(
      DateTime.now().millisecondsSinceEpoch ~/ 1000,
      title,
      body,
      details,
      payload: payload,
    );
  }

  static void _onNotificationTapped(NotificationResponse response) {
    print('üì± Ng∆∞·ªùi d√πng tap v√†o th√¥ng b√°o: ${response.payload}');
    // X·ª≠ l√Ω khi user tap v√†o notification
  }

  static Future<void> _saveNotificationToFirestore(RemoteMessage message) async {
    final user = _auth.currentUser;
    if (user != null) {
      try {
        final thongBao = ThongBao(
          id: DateTime.now().millisecondsSinceEpoch.toString(),
          tieuDe: message.notification?.title ?? 'KFC Vietnam',
          noiDung: message.notification?.body ?? '',
          loai: message.data['type'] ?? 'don_hang', // M·∫∑c ƒë·ªãnh l√† ƒë∆°n h√†ng
          thoiGian: DateTime.now(),
          daDoc: false,
          hinhAnh: message.notification?.android?.imageUrl,
          duLieuThem: message.data,
        );

        await _firestore
            .collection('users')
            .doc(user.uid)
            .collection('thong_bao')
            .add(thongBao.toJson());
        
        print('‚úÖ ƒê√£ l∆∞u th√¥ng b√°o v√†o Firestore');
      } catch (e) {
        print('‚ùå L·ªói khi l∆∞u th√¥ng b√°o: $e');
      }
    }
  }

  static void _handleNotificationAction(Map<String, dynamic> data) {
    // X·ª≠ l√Ω action d·ª±a tr√™n data c·ªßa notification
    final type = data['type'];
    final id = data['id'];
    
    // T·∫≠p trung v√†o ƒë∆°n h√†ng
    if (type == 'don_hang') {
      // Navigate to order detail
    }
  }

  // G·ª≠i th√¥ng b√°o local
  static Future<void> sendLocalNotification({
    required String title,
    required String body,
    String? imageUrl,
  }) async {
    await _showLocalNotification(
      title: title,
      body: body,
    );
  }

  // L·∫•y danh s√°ch th√¥ng b√°o c·ªßa user
  static Future<List<ThongBao>> getUserNotifications() async {
    final user = _auth.currentUser;
    if (user == null) return [];

    try {
      final snapshot = await _firestore
          .collection('users')
          .doc(user.uid)
          .collection('thong_bao')
          .orderBy('thoiGian', descending: true)
          .limit(50)
          .get();

      return snapshot.docs.map((doc) {
        final data = doc.data();
        data['id'] = doc.id;
        return ThongBao.fromJson(data);
      }).toList();
    } catch (e) {
      print('‚ùå L·ªói khi l·∫•y th√¥ng b√°o: $e');
      return [];
    }
  }

  // ƒê√°nh d·∫•u th√¥ng b√°o ƒë√£ ƒë·ªçc
  static Future<void> markAsRead(String notificationId) async {
    final user = _auth.currentUser;
    if (user == null) return;

    try {
      await _firestore
          .collection('users')
          .doc(user.uid)
          .collection('thong_bao')
          .doc(notificationId)
          .update({'daDoc': true});
    } catch (e) {
      print('‚ùå L·ªói khi ƒë√°nh d·∫•u ƒë√£ ƒë·ªçc: $e');
    }
  }

  // X√≥a th√¥ng b√°o
  static Future<void> deleteNotification(String notificationId) async {
    final user = _auth.currentUser;
    if (user == null) return;

    try {
      await _firestore
          .collection('users')
          .doc(user.uid)
          .collection('thong_bao')
          .doc(notificationId)
          .delete();
    } catch (e) {
      print('‚ùå L·ªói khi x√≥a th√¥ng b√°o: $e');
    }
  }

  // Stream th√¥ng b√°o real-time
  static Stream<List<ThongBao>> streamUserNotifications() {
    final user = _auth.currentUser;
    if (user == null) return Stream.value([]);

    return _firestore
        .collection('users')
        .doc(user.uid)
        .collection('thong_bao')
        .orderBy('thoiGian', descending: true)
        .limit(50)
        .snapshots()
        .map((snapshot) {
      return snapshot.docs.map((doc) {
        final data = doc.data();
        data['id'] = doc.id;
        return ThongBao.fromJson(data);
      }).toList();
    });
  }

  // T·∫°o th√¥ng b√°o tr·∫°ng th√°i ƒë∆°n h√†ng v√† l∆∞u v√†o Firebase
  static Future<void> createOrderStatusNotification({
    required String orderId,
    required String status,
    String? message,
  }) async {
    final user = _auth.currentUser;
    if (user == null) return;

    String title = '';
    String body = message ?? '';

    switch (status.toLowerCase()) {
      case 'confirmed':
        title = '‚úÖ ƒê∆°n h√†ng ƒë√£ x√°c nh·∫≠n';
        body = body.isEmpty ? 'ƒê∆°n h√†ng #${orderId.substring(0, 8)} ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n' : body;
        break;
      case 'preparing':
        title = 'üë®‚Äçüç≥ ƒêang chu·∫©n b·ªã m√≥n';
        body = body.isEmpty ? 'ƒê∆°n h√†ng c·ªßa b·∫°n ƒëang ƒë∆∞·ª£c chu·∫©n b·ªã' : body;
        break;
      case 'shipping':
        title = 'üöö ƒêang giao h√†ng';
        body = body.isEmpty ? 'ƒê∆°n h√†ng ƒëang tr√™n ƒë∆∞·ªùng giao ƒë·∫øn b·∫°n' : body;
        break;
      case 'delivered':
        title = 'üéâ Giao h√†ng th√†nh c√¥ng';
        body = body.isEmpty ? 'ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c giao th√†nh c√¥ng!' : body;
        break;
      case 'cancelled':
        title = '‚ùå ƒê∆°n h√†ng ƒë√£ h·ªßy';
        body = body.isEmpty ? 'ƒê∆°n h√†ng #${orderId.substring(0, 8)} ƒë√£ b·ªã h·ªßy' : body;
        break;
      default:
        title = 'üì¶ C·∫≠p nh·∫≠t ƒë∆°n h√†ng';
        body = body.isEmpty ? 'ƒê∆°n h√†ng #${orderId.substring(0, 8)} ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t' : body;
    }

    try {
      // T·∫°o ƒë·ªëi t∆∞·ª£ng th√¥ng b√°o
      final thongBao = ThongBao(
        id: DateTime.now().millisecondsSinceEpoch.toString(),
        tieuDe: title,
        noiDung: body,
        loai: 'don_hang',
        thoiGian: DateTime.now(),
        daDoc: false,
        duLieuThem: {
          'donHangId': orderId,
          'status': status,
          'timestamp': DateTime.now().toIso8601String(),
        },
      );

      // L∆∞u v√†o Firestore
      await _firestore
          .collection('users')
          .doc(user.uid)
          .collection('thong_bao')
          .add(thongBao.toJson());
    
      // Hi·ªÉn th·ªã local notification
      await _showLocalNotification(
        title: title,
        body: body,
      );
    
      print('‚úÖ ƒê√£ t·∫°o th√¥ng b√°o tr·∫°ng th√°i ƒë∆°n h√†ng: $title');
    } catch (e) {
      print('‚ùå L·ªói khi t·∫°o th√¥ng b√°o tr·∫°ng th√°i ƒë∆°n h√†ng: $e');
    }
  }
}
